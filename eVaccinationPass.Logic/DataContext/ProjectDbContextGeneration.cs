//@GeneratedCode
/*****************************************************************************************
  Please note that this file is regenerated each time it is generated
  and all your changes will be overwritten in this file.
  If you still want to make changes, you can do this in 2 ways:
  
  1. Use a 'partial class name' according to the following pattern:
  
  #if GENERATEDCODE_ON
  namespace_name {
    partial class ClassName
    {
      partial void BeforeExecute(ref bool handled)
      {
        //... do something
        handled = true;
      }
    }
   }
  #endif
  
  2. Change the label //@GeneratedCode to //@CustomizedCode, for example.
     Alternatively, you can also remove the label or give it a different name.
*****************************************************************************************/
namespace eVaccinationPass.Logic.DataContext
{
    /// <summary>
    /// Generated by the generator
    /// </summary>
    partial class ProjectDbContext
    {
        #region properties
        /// <summary>
        /// Generated by the generator.
        /// </summary>
        private DbSet<Entities.Vaccination> DbVaccinationSet { get; set; }
        /// <summary>
        /// Generated by the generator.
        /// </summary>
        public Contracts.IVaccinationSet VaccinationSet => (Contracts.IVaccinationSet)GetEntitySet<Entities.Vaccination>();
        /// <summary>
        /// Generated by the generator.
        /// </summary>
        private DbSet<Entities.Account.Identity> DbIdentitySet { get; set; }
        /// <summary>
        /// Generated by the generator.
        /// </summary>
        public Contracts.Account.IIdentitySet IdentitySet => (Contracts.Account.IIdentitySet)GetEntitySet<Entities.Account.Identity>();
        /// <summary>
        /// Generated by the generator.
        /// </summary>
        private DbSet<Entities.Account.IdentityXRole> DbIdentityXRoleSet { get; set; }
        /// <summary>
        /// Generated by the generator.
        /// </summary>
        public Contracts.Account.IIdentityXRoleSet IdentityXRoleSet => (Contracts.Account.IIdentityXRoleSet)GetEntitySet<Entities.Account.IdentityXRole>();
        /// <summary>
        /// Generated by the generator.
        /// </summary>
        private DbSet<Entities.Account.LoginSession> DbLoginSessionSet { get; set; }
        /// <summary>
        /// Generated by the generator.
        /// </summary>
        public Contracts.Account.ILoginSessionSet LoginSessionSet => (Contracts.Account.ILoginSessionSet)GetEntitySet<Entities.Account.LoginSession>();
        /// <summary>
        /// Generated by the generator.
        /// </summary>
        private DbSet<Entities.Account.Role> DbRoleSet { get; set; }
        /// <summary>
        /// Generated by the generator.
        /// </summary>
        public Contracts.Account.IRoleSet RoleSet => (Contracts.Account.IRoleSet)GetEntitySet<Entities.Account.Role>();
        /// <summary>
        /// Generated by the generator.
        /// </summary>
        private DbSet<Entities.Account.SecureIdentity> DbSecureIdentitySet { get; set; }
        /// <summary>
        /// Generated by the generator.
        /// </summary>
        public Contracts.Account.ISecureIdentitySet SecureIdentitySet => (Contracts.Account.ISecureIdentitySet)GetEntitySet<Entities.Account.SecureIdentity>();
        /// <summary>
        /// Generated by the generator.
        /// </summary>
        private DbSet<Entities.Account.User> DbUserSet { get; set; }
        /// <summary>
        /// Generated by the generator.
        /// </summary>
        public Contracts.Account.IUserSet UserSet => (Contracts.Account.IUserSet)GetEntitySet<Entities.Account.User>();
        #endregion properties

        #region partial methods
        /// <summary>
        /// Generated by the generator
        /// </summary>
        partial void GetGeneratorDbSet<E>(ref DbSet<E>? dbSet, ref bool handled) where E : Entities.DbObject
        {
            if (typeof(E) == typeof(Entities.Vaccination))
            {
                dbSet = DbVaccinationSet as DbSet<E>;
                handled = true;
            }
            else if (typeof(E) == typeof(Entities.Account.Identity))
            {
                dbSet = DbIdentitySet as DbSet<E>;
                handled = true;
            }
            else if (typeof(E) == typeof(Entities.Account.IdentityXRole))
            {
                dbSet = DbIdentityXRoleSet as DbSet<E>;
                handled = true;
            }
            else if (typeof(E) == typeof(Entities.Account.LoginSession))
            {
                dbSet = DbLoginSessionSet as DbSet<E>;
                handled = true;
            }
            else if (typeof(E) == typeof(Entities.Account.Role))
            {
                dbSet = DbRoleSet as DbSet<E>;
                handled = true;
            }
            else if (typeof(E) == typeof(Entities.Account.SecureIdentity))
            {
                dbSet = DbSecureIdentitySet as DbSet<E>;
                handled = true;
            }
            else if (typeof(E) == typeof(Entities.Account.User))
            {
                dbSet = DbUserSet as DbSet<E>;
                handled = true;
            }
        }
        /// <summary>
        /// Generated by the generator
        /// </summary>
        partial void GetGeneratorEntitySet<E>(ref EntitySet<E>? entitySet, ref bool handled) where E : Entities.EntityObject, new()
        {
            if (typeof(E) == typeof(Entities.Vaccination))
            {
                entitySet = new DataContext.VaccinationSet(this, DbVaccinationSet) as EntitySet<E>;
                handled = true;
            }
            else if (typeof(E) == typeof(Entities.Account.Identity))
            {
                entitySet = new DataContext.Account.IdentitySet(this, DbIdentitySet) as EntitySet<E>;
                handled = true;
            }
            else if (typeof(E) == typeof(Entities.Account.IdentityXRole))
            {
                entitySet = new DataContext.Account.IdentityXRoleSet(this, DbIdentityXRoleSet) as EntitySet<E>;
                handled = true;
            }
            else if (typeof(E) == typeof(Entities.Account.LoginSession))
            {
                entitySet = new DataContext.Account.LoginSessionSet(this, DbLoginSessionSet) as EntitySet<E>;
                handled = true;
            }
            else if (typeof(E) == typeof(Entities.Account.Role))
            {
                entitySet = new DataContext.Account.RoleSet(this, DbRoleSet) as EntitySet<E>;
                handled = true;
            }
            else if (typeof(E) == typeof(Entities.Account.SecureIdentity))
            {
                entitySet = new DataContext.Account.SecureIdentitySet(this, DbSecureIdentitySet) as EntitySet<E>;
                handled = true;
            }
            else if (typeof(E) == typeof(Entities.Account.User))
            {
                entitySet = new DataContext.Account.UserSet(this, DbUserSet) as EntitySet<E>;
                handled = true;
            }
        }
        /// <summary>
        /// Generated by the generator
        /// </summary>
        partial void GetGeneratorViewSet<E>(ref ViewSet<E>? viewSet, ref bool handled) where E : Entities.ViewObject, new()
        {
        }
        /// <summary>
        /// Generated by the generator
        /// </summary>
        static partial void OnViewModelCreating(ModelBuilder modelBuilder)
        {
        }
        #endregion partial methods
    }
}
